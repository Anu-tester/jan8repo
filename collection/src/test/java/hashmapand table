What is the difference between HashMap and Hashtable class?
Hashmap vs Hashtable
1. HashMap is non synchronized. It is not-thread safe and can’t be shared
 between many threads without proper synchronization code whereas
  Hashtable is synchronized. It is thread-safe and can be shared with many threads.
2. HashMap allows one null key and multiple null values whereas
 Hashtable doesn’t allow any null key or value.
3. HashMap is generally preferred over 
HashTable if thread synchronization is not needed

Why HashTable doesn’t allow null and HashMap does?
To successfully store and retrieve objects from a HashTable,
 the objects used as keys must implement the hashCode method
  and the equals method. Since null is not an object,
   it can’t implement these methods. HashMap is an advanced 
   version and improvement on the Hashtable. HashMap was created later.
   
   HashMap	Hashtable
1) HashMap is non synchronized. It is not-thread safe and can't be shared between many threads without proper synchronization code.
	Hashtable is synchronized. It is thread-safe and can be shared with many threads.
2) HashMap allows one null key and multiple null values.
	Hashtable doesn't allow any null key or value.
3) HashMap is a new class introduced in JDK 1.2.	
Hashtable is a legacy class.
4) HashMap is fast.	Hashtable is slow.
5) We can make the HashMap as synchronized by calling this code
Map m = Collections.synchronizedMap(hashMap);	
Hashtable is internally synchronized and can't be unsynchronized.
6) HashMap is traversed by Iterator.	
Hashtable is traversed by Enumerator and Iterator.
7) Iterator in HashMap is fail-fast.	Enumerator in 
Hashtable is not fail-fast.
8) HashMap inherits AbstractMap class.	
Hashtable inherits Dictionary class.