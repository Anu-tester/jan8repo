ArrayList	LinkedList
1) ArrayList internally uses a dynamic array to store the elements.
	LinkedList internally uses a doubly linked list to store the elements.
2) Manipulation with ArrayList is slow because it internally uses an array. If any element is removed from the array, all the bits are shifted in memory.
	Manipulation with LinkedList is faster than ArrayList because it uses a doubly linked list, so no bit shifting is required in memory.
3) An ArrayList class can act as a list only because it implements List only.
	LinkedList class can act as a list and queue both because it implements List and Deque interfaces.
4) ArrayList is better for storing and accessing data.	
LinkedList is better for manipulating data.

*****************************************************************************************

ArrayList	Vector
1) ArrayList is not synchronized.	
Vector is synchronized.
2) ArrayList increments 50% of current array size if the number of elements exceeds from its capacity.
	Vector increments 100% means doubles the array size if the total number of elements exceeds than its capacity.
3) ArrayList is not a legacy class. It is introduced in JDK 1.2.	
Vector is a legacy class.
4) ArrayList is fast because it is non-synchronized.	
Vector is slow because it is synchronized, i.e., in a multithreading environment, it holds the other threads in runnable or non-runnable state until current thread releases the lock of the object.
5) ArrayList uses the Iterator interface to traverse the elements.	
A Vector can use the Iterator interface or Enumeration interface to traverse the elements.

*****************************************************************************************

What is the difference between HashSet and HashMap classes in collection framework?

Java HashMap is a hash table based implementation of Map interface.
HashMap implements Map, Cloneable, and Serializable interface es.
In HashMap we store a key-value pair. It maintains the mapping of key and value.
It does not allow duplicate keys, but duplicate values are allowed.
It can contain a single null key and multiple null values.
HashMap uses the put() method to add the elements in the HashMap.
HashMap is faster/ than HashSet because values are associated with a unique key.
Only one object is created during the add operation.
HashMap internally uses hashing to store objects.
Always prefer when we do not maintain the uniqueness.
{a->4, b->9, c->5} Where a, b, c are keys and 4, 9, 5 are values associated with key.


HashSet is a Set. It creates a collection that uses a hash table for storage.
HashSet implements Set, Cloneable, Serializable, Iterable and Collection interfaces.
In HashSet, we store objects.
It does not allow duplicate values.
It can contain a single null value.
HashSet uses the add() method to add elements in the HashSet.
HashSet is slower than HashMap because the member object is used for calculating hashcode value, which can be same for two objects.
There are two objects created during put operation, one for key and one for value.
HashSet internally uses a HashMap object to store objects.
It is used when we need to maintain the uniqueness of data.
{6, 43, 2, 90, 4} It denotes a set.
